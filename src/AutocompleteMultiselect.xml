<?xml version="1.0" encoding="utf-8"?>
<widget id="itvisors.autocompletemultiselect.AutocompleteMultiselect" pluginWidget="true" needsEntityContext="true" offlineCapable="true"
        supportedPlatform="Web"
        xmlns="http://www.mendix.com/widget/1.0/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://www.mendix.com/widget/1.0/ ../node_modules/mendix/custom_widget.xsd">
    <name>Autocomplete Multiselect</name>
    <description>Auto complete widget where multiple options can be selected. Based on https://material-ui.com/components/autocomplete/</description>
    <icon/>
    <properties>
        <propertyGroup caption="General">
            <systemProperty key="Label" />
            <systemProperty key="Visibility"/>
            <property key="editable" type="expression" required="false">
                <caption>Editable</caption>
                <description>Whether or not the widget is ediable. If left empty, the widget will be editable.</description>
                <returnType type="Boolean" />
            </property>
            <property key="dataSourceOptions" type="datasource" isList="true" required="false">
                <caption>Data source</caption>
                <description />
            </property>
            <property key="titleAttr" type="attribute" dataSource="dataSourceOptions" required="false">
                <caption>Title</caption>
                <description>String attribute where the title is stored to be shown in the dropdown. Should be unique to be able to make a distinction between the items.</description>
                <attributeTypes>
                    <attributeType name="String"/>
                </attributeTypes>
            </property>
            <property key="keyAttr" type="attribute" dataSource="dataSourceOptions" required="false">
                <caption>Key</caption>
                <description>Optional: Attribute where the key is stored. This key is only used in the response and can be used when the title does not suffice to find the object in mendix. The new JSON will be for example [{"title":"example1", "key":"1234"}] for multiselect when a string key is used.</description>
                <attributeTypes>
                    <attributeType name="String"/>
                    <attributeType name="Integer"/>
                </attributeTypes>
            </property>
            <property key="defaultSelectedAttr" type="attribute" dataSource="dataSourceOptions" required="false">
                <caption>Default selected</caption>
                <description>Boolean attribute where is stored whether this option should be selected by default when loading the widget for the first time</description>
                <attributeTypes>
                    <attributeType name="Boolean"/>
                </attributeTypes>
            </property>
            <property key="defaultSelectedStringAttr" type="attribute" required="false">
                <caption>Default selected string</caption>
                <description>Advanced: Can be used instead of Default selected. If this one is used, the default selected property is ignored. This property links to a string where the default selected titles are stored in the json format ["title1","title2"].</description>
                <attributeTypes>
                    <attributeType name="String"/>
                </attributeTypes>
            </property>
            <property key="multiple" type="boolean" required="true" defaultValue="true">
                <caption>Multi-select</caption>
                <description>If set to true, multiple options can be selected. Otherwise, the widget can be used as single-select</description>
            </property>
        </propertyGroup>

        <propertyGroup caption="Events">
            <property key="onChangeAction" type="action" required="false">
                <caption>On Change Action</caption>
                <description>Action to trigger when an option is selected or deselected. 
                Since this action is triggered for every change and this can happen quite fast if "No close on select" is set to true, it is wise to keep this action very short. If this combination is used, the response can best be mapped when used e.g. on save.</description>
            </property>
            <property key="responseAttribute" type="attribute" required="true">
                <caption>Response</caption>
                <description>Attribute where the selected items are stored in json format ([{"title":"example1"}] for multiselect and {"title":"example1"} for single select). User needs write access on this attribute.</description>
                <attributeTypes>
                    <attributeType name="String"/>
                </attributeTypes>
            </property>
            <property key="refreshAttribute" type="attribute" required="false">
                <caption>Refresh</caption>
                <description>Set to true to refresh the widget back to the default values, widget will set the value back to false. Make sure the user has got write access. Widget will only be reset when the context object is refreshed.</description>
                <attributeTypes>
                    <attributeType name="Boolean"/>
                </attributeTypes>
            </property>
        </propertyGroup>

        <propertyGroup caption="Behavior">
            <property key="disableCloseOnSelect" type="boolean" required="true" defaultValue="false">
                <caption>No close on select</caption>
                <description>Whether or not to close the list when an item is selected. Set to true to not close the list when an item is selected.</description>
            </property>
            <property key="filterSelectedOptions" type="boolean" required="true" defaultValue="false">
                <caption>Filter selected options</caption>
                <description>Whether or not to filter the options out of the list that are already selected.</description>
            </property>
            <property key="limitTags" type="integer" required="true" defaultValue="0">
                <caption>Limit Tags</caption>
                <description>Maximum number of selected tags to show if the dropdown is closed. If more options are selected, there will be an indication how many options are selected (e.g. +2) If set to 0, there is no limit.</description>
            </property>
        </propertyGroup>

        <propertyGroup caption="Layout">
            <property key="noOptionsText" type="textTemplate" required="false">
                <caption>No Options</caption>
                <description>Text to show when no options found</description> 
            </property>
            <property key="placeholder" type="textTemplate" required="false">
                <caption>Placeholder</caption>
                <description>Default value to show as placeholder</description> 
            </property>
            <property key="label" type="textTemplate" required="false">
                <caption>Label</caption>
                <description>Other way to display the label, within the widget</description> 
            </property>
            <property key="variant" type="enumeration" required="true" defaultValue="standard">
                <caption>Variant</caption>
                <description>How the text field will be styled</description>
                <enumerationValues>
                    <enumerationValue key="standard">standard</enumerationValue>
                    <enumerationValue key="outlined">outlined</enumerationValue>
                </enumerationValues>
            </property>
            <property key="showCheckboxes" type="boolean" required="true" defaultValue="false">
                <caption>Checkboxes</caption>
                <description>Whether or not to show checkboxes in front of the options.</description>
            </property>
        </propertyGroup>

        <propertyGroup caption="Data source attibute">
            <property key="JSONAttribute" type="attribute" required="false">
                <caption>Data source attribute</caption>
                <description>This property will overrule the data source and default selected properties. Attribute should contain the list of items to be shown in the widget in the JSON format ([{"title":"title1", "key":"key1", "default":true}]), where default and key are optional.
                Can be used when the items are non-persistent and you don't want to keep them in cache or when you only want to load items when the widget is selected or X chars are filled in.</description>
                <attributeTypes>
                    <attributeType name="String"/>
                </attributeTypes>
            </property>
            <property key="loadOnOpen" type="boolean" required="true" defaultValue="false">
                <caption>Load on open</caption>
                <description>If set to true, an action is called when the widget is opened that can fill the data source attribute.</description>
            </property>
            <property key="loadingText" type="expression" required="false">
                <caption>Loading text</caption>
                <description>Text to show when loading</description>
                <returnType type="String" />
            </property>
            <property key="onOpenAction" type="action" required="false">
                <caption>On Open Action</caption>
                <description>Action to trigger when the widget is opened, this flow has to fill in the JSON attribute.</description>
            </property>
            <property key="searchAfterXChars" type="expression" required="false">
                <caption>Search after X chars</caption>
                <description>Custom search: Only execute "Key stroke action" after X chars are filled in. If less chars a filled in, no options are shown and a text is shown. For every char added, the action is executed.</description>
                <returnType type="Integer" />
            </property>
            <property key="searchAfterXCharsText" type="expression" required="false">
                <caption>To few chars text</caption>
                <description>Text to show when to few chars are filled</description>
                <returnType type="String" />
            </property>
            <property key="onKeyStrokeAction" type="action" required="false">
                <caption>Key stroke action</caption>
                <description>Custom search: Action to trigger when a key stroke is entered, this flow has to fill in the JSON attribute.</description>
            </property>
            <property key="onKeyStrokeActionDelay" type="expression" required="true" defaultValue="500">
                <caption>Key stroke delay</caption>
                <description>Custom search: Determines how many ms to wait after the last key stroke to execute the action. Used to determine whether a person is still typing.</description>
                <returnType type="Integer" />
            </property>
        </propertyGroup>
    </properties>
</widget>